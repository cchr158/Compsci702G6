package GaleShapleV1_3;

/*
 * Author: Callan Christophersen
 * UPI: cchr158
 */

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.Collection;
import java.util.LinkedList;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import java.applet.*;
import java.awt.*;
import java.beans.*;
import java.lang.*;
import java.math.*;
import java.net.*;
import java.awt.im.spi.*;
import java.awt.datatransfer.*;
import java.nio.file.*;
import java.util.*;
import com.oracle.*;
import com.oracle.jrockit.*;
import com.oracle.util.*;
import com.sun.*;
import java.awt.image.BufferedImage;
import java.util.ArrayList;
import java.util.List;

public class Matching{
	class MandelModel {
	    private int maxIter;
	    private final List listeners = new ArrayList();

	    final private double cr0Min = -2.5;
	    final private double cr0Max = 0.5;
	    final private double ci0Min = -1.25;
	    final private double ci0Max = 1.25;

	    private double crMin, crMax, ciMin, ciMax;

	    private int [] iters;
	    private int width, height;

	    public MandelModel(int maxIter, int width, int height) {
	        this.maxIter = maxIter;

	        this.width = width;
	        this.height = height;
	        this.iters = new int[width*height];

	        this.crMin = cr0Min;
	        this.crMax = cr0Max;
	        this.ciMin = ci0Min;
	        this.ciMax = ci0Max;
	    }	    
	}	
	
	private String[] GaleShapleyAlg() {
		Collection<Blue> bls = new LinkedList<Blue>(blues);
		Blue m;
		Pink w;
		while (!bls.isEmpty()) {
			m = ((LinkedList<Blue>) bls).poll();
			w = (Pink) ((LinkedList<Pink>) m.getPreferanceList()).poll();
			if (w.isFree()) {
				w.setMyBlue(m);
			} else {
				if (w.compareToMyBlue(m)) {
					bls.add(w.getMyMan());
					w.setMyBlue(m);
				} else {
					bls.add(m);
				}
			}
		}
		return matching.printMatching();
	}
	
	public static String[] GS(LinkedList<String> b, LinkedList<String> p) {
		b = matching.clearWhiteSpace(b);
		p = matching.clearWhiteSpace(p);
		b = matching.encryptList(b);
		p = matching.encryptList(p);
		return (new Matching(b, p)).GaleShapleyAlg();
	}
	
	public Matching(LinkedList<String> b, LinkedList<String> p) {
		matching.setupPinks(p,this);
		matching.setupBlues(b);
		matching.setPinksPrefs(p);
	}
	
	public static void main(String[] args){
		LinkedList<String> bs = new LinkedList<String>();
		bs.add("Frank");
		bs.add("Kate,Mary,Rhea,Jill");
		bs.add("Dennis");
		bs.add("Mary,Jill,Rhea,Kate");
		bs.add("Mac");
		bs.add("Kate,Rhea,Jill,Mary");
		bs.add("Charlie");
		bs.add("Rhea,Mary,Kate,Jill");
		LinkedList<String> ps = new LinkedList<String>();
		ps.add("Rhea");
		ps.add("Frank,Mac,Dennis,Charlie");
		ps.add("Mary");
		ps.add("Mac,Charlie,Dennis,Frank");
		ps.add("Kate");
		ps.add("Dennis,Mac,Charlie,Frank");
		ps.add("Jill");
		ps.add("Charlie,Dennis,Frank,Mac");
		String [] s = Matching.GS(bs, ps);
		for(int i=0; i<s.length; i+=2){
			System.out.println(s[i]+" "+s[i+1]);
		}
	}
	
	interface Pink{
		String getID();

		Blue getMyMan();

		boolean compareToMyBlue(Blue m);

		void setMyBlue(Blue m);

		void setPreferances(String prefList);

		boolean isFree();
	}
	private final static LinkedList<Blue> blues = new LinkedList<Blue>();
	interface Blue{
		Pink getMyWomen();

		void setMyPink(Pink w);

		Collection<Pink> getPreferanceList();

		String getID();

		Blue setPref(String prefList);
	}
	private static Pink[] pinks;
	interface matching{
		static final String key = "|yU{0?ZI?b.>f'xM.~B`N~Kx((+09Zi>RO:}`^f,";

		static Pink[] getPinks() {
			return pinks;
		}

		
		static Collection<Blue> getBlues() {
			return blues;
		}

		static String[] printMatching() {
			LinkedList<String> out = new LinkedList<String>();
			for (Blue m : blues) {
				out.add(m.getID());
				out.add(m.getMyWomen().getID());
			}
			return out.toArray(new String[out.size()]);
		}

		static void setPinksPrefs(LinkedList<String> p) {
			for (int i = 0, j = 1; i < pinks.length && j < p.size();) {
				pinks[i].setPreferances(p.get(j));
				i++;
				j += 2;
			}
		}

		static void setupBlues(LinkedList<String> b) {
			for (int i = 0; i < b.size(); i += 2) {
				final int ii=i;
				blues.add(new Blue(){
					private Collection<Pink> preferanceList = new LinkedList<Pink>();
					private Pink myPink = null;
					private String id = b.get(ii);

					public Pink getMyWomen() {
						return this.myPink;
					}
					public String getID(){
						return this.id;
					}
					public Object ob1(Object obj){
						for(int i=0; i < ((String)obj).length(); i++){
							obj += "ASLDJF;akldjf";
						}
						return obj;
					}
					public Blue setPref(String prefList) {
						String[] pinkIDs = prefList.split(",");
						for (int i = 0; i < pinkIDs.length; i++) {
							int j = 0;
							while (!pinks[j].getID().equals(pinkIDs[i]))
								j++;
							this.preferanceList.add(pinks[j]);
						}
						return this;
					}
					public Collection<Pink> getPreferanceList() {
						return this.preferanceList;
					}
					public void setMyPink(Pink w) {
						this.myPink = w;
					}
				}.setPref(b.get(ii+1)));
			}
		}

		
		static void setupPinks(LinkedList<String> p, Matching gs) {
			pinks = new Pink[p.size() / 2];
			int name = 0;
			for (int i = 0; i < p.size() / 2; i++) {
				Matching temp = gs;
				final int n = name;
				pinks[i] = new Pink(){
					private Blue myBlue = null ;
					private Blue[] preferanceList = new Blue[p.size() / 2];
					private Matching gs = temp;
					private String id = p.get(n);

					public String getID() {
						return this.id;
					}

					public Blue getMyMan() {
						return this.myBlue;
					}

					public boolean compareToMyBlue(Blue m) {
						for (int i = 0; i < this.preferanceList.length; i++) {
							if (this.preferanceList[i].equals(this.myBlue)) {
								return false;
							}
							if (this.preferanceList[i].equals(m)) {
								return true;
							}
						}
						return false;
					}

					public void setMyBlue(Blue m) {
						this.myBlue = m;
						m.setMyPink(this);
					}

					public void setPreferances(String prefList) {
						String[] blueIDs = prefList.split(",");
						for (int i = 0; i < blueIDs.length; i++) {
							int j = 0;
							while (!(blues.get(j).getID().equals(blueIDs[i])))
								j++;
							this.preferanceList[i] = blues.get(j);
						}
					}

					public boolean isFree() {
						return this.myBlue == null;
					}
					
				};

				name += 2;
			}
		}

		static LinkedList<String> clearWhiteSpace(LinkedList<String> l) {
			String[] lArray = l.toArray(new String[l.size()]);
			l = new LinkedList<String>();
			for (int i = 0; i < lArray.length; i++) {
				char[] c = lArray[i].toCharArray();
				for (int j = 0; j < c.length; j++) {
					if (c[j] == ' ')
						c[j] = '\0';
				}
				String s="";
				for(int j=0; j<c.length; j++){
					s +=c[j];
				}
				l.add(s);
			}
			return l;
		}
	}
}
